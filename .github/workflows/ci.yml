name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_findme_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock requests-mock

      - name: Create .env file for testing
        run: |
          echo "DB_NAME=test_findme_db" > .env
          echo "USER_NAME_DB=postgres" >> .env
          echo "USER_PASSWORD_DB=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "VK_GROUP_TOKEN=test_vk_group_token" >> .env
          echo "VK_USER_TOKEN=test_vk_user_token" >> .env
          echo "API_LONG_POLL_VERSION=5.199" >> .env

      - name: Run database tests
        env:
          TEST_DB_NAME: test_findme_db
          USER_NAME_DB: postgres
          USER_PASSWORD_DB: postgres
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          python -m pytest tests/test_check_db.py tests/test_repository.py -v

      - name: Run VK service tests
        run: |
          python -m pytest tests/test_user.py tests/test_vk_service.py -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: timeout 60s ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} echo "SSH OK"

      - name: Deploy to server
        env:
          VK_GROUP_TOKEN: ${{ secrets.VK_GROUP_TOKEN }}
          VK_USER_TOKEN: ${{ secrets.VK_USER_TOKEN }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -e
            cd ~/findme-vk-bot || exit

            git fetch origin
            git reset --hard origin/main

            cat > .env << EOF
            DB_NAME=findme_db
            USER_NAME_DB=postgres
            USER_PASSWORD_DB=postgres
            DB_HOST=db
            DB_PORT=5432
            VK_GROUP_TOKEN=$VK_GROUP_TOKEN
            VK_USER_TOKEN=$VK_USER_TOKEN
            API_LONG_POLL_VERSION=5.199
            EOF

            docker compose up -d --build db pgadmin app
            echo 'VK FindMe Bot deployment completed successfully!'
          "
